# MediaPipe face mesh rendering subgraph.
type: "LandmarkRendererCpu"

input_stream: "IMAGE:input_image"

# Multi-face Alignment data
# (std::vector<std::map<std::string, double>>)
input_stream: "ALIGNMENTS:multi_face_alignments"

# Multi-face blink data
# (std::vector<std::map<std::string, double>>)
input_stream: "BLINKS:multi_face_blinks"

# Multi-face standardized landmarks
# (std::vector<NormalizedLandmarkList> )
input_stream: "LANDMARKS:multi_face_std_landmarks"

# CPU image with rendered data. (ImageFrame)
output_stream: "IMAGE:output_image"

node {
  calculator: "ImagePropertiesCalculator"
  input_stream: "IMAGE:input_image"
  output_stream: "SIZE:image_size"
}

node  {
    calculator: "StandardizedLandmarkProjectionMatrixCalculator"
    input_stream: "SIZE:image_size"
    output_stream: "MATRIX:matrix"
}

node  {
    calculator: "LandmarkProjectionCalculator"
    input_stream: "NORM_LANDMARKS:multi_face_std_landmarks"
    input_stream: "PROJECTION_MATRIX:matrix"
    output_stream: "NORM_LANDMARKS:projected_landmarks"
}

node {
  calculator: "FaceLandmarksToRenderDataCalculator"
  input_stream: "NORM_LANDMARKS:projected_landmarks"
  output_stream: "RENDER_DATA:landmarks_render_data"
  node_options: {
    [type.googleapis.com/mediapipe.LandmarksToRenderDataCalculatorOptions] {
      landmark_color { r: 255 g: 0 b: 0 }
      connection_color { r: 0 g: 255 b: 0 }
      thickness: 2
      visualize_landmark_depth: false
    }
  }
}

# Convert the FaceAlignment to RenderData
node {
  calculator: "FaceAlignmentToRenderDataCalculator"
  input_stream: "ALIGNMENT:multi_face_alignments"
  output_stream: "RENDER:alignment_render_data"
}

# Converts detected eye blinks to drawing primitives for annotation overlay.
node {
  calculator: "EyeBlinkToRenderDataCalculator"
  input_stream: "BLINK:multi_face_blinks"
  output_stream: "RENDER:blink_render_data"
}

node  {
  calculator: "AnnotationOverlayCalculator"
  input_stream: "IMAGE:input_image"
  input_stream: "alignment_render_data"
  input_stream: "blink_render_data"
  input_stream: "landmarks_render_data"

  output_stream: "IMAGE:output_image"
}
